(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{316:function(t,v,_){"use strict";_.r(v);var r=_(10),e=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("summary",[v("b",[t._v("2022-10-11 星期二")])]),t._v(" "),v("blockquote",[v("p",[t._v("我们曾经那么好，现在却连声问候，都怕是打扰。")])]),t._v(" "),v("p",{staticStyle:{color:"blue"}},[t._v("1. Vue3.0 里为什么要用 Proxy API 替代 defineProperty API？ 【Vue】")]),t._v(" "),v("details",[v("summary",[v("b",[t._v("参考答案")])]),t._v(" "),v("p"),v("p",[t._v("响应式优化。")]),t._v(" "),v("ul",[v("li",[v("ol",[v("li",[t._v("defineProperty API 的局限性最大原因是它只能针对单例属性做监听。\nVue2.x 中的响应式实现正是基于 defineProperty 中的 descriptor，对 data 中的属性做了遍历 + 递归，为每个属性设置了 getter、setter。\n这也就是为什么 Vue 只能对 data 中预定义过的属性做出响应的原因，在 Vue 中使用下标的方式直接修改属性的值或者添加一个预先不存在的对象属性是无法做到 setter监听的，这是 defineProperty 的局限性。")])])]),t._v(" "),v("li",[v("ol",{attrs:{start:"2"}},[v("li",[t._v("Proxy API 的监听是针对一个对象的，那么对这个对象的所有操作会进入监听操作， 这就完全可以代理所有属性，将会带来很大的性能提升和更优的代码。\nProxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。")])])]),t._v(" "),v("li",[v("ol",{attrs:{start:"3"}},[v("li",[t._v("响应式是惰性的\n在 Vue.js 2.x 中，对于一个深层属性嵌套的对象，要劫持它内部深层次的变化，就需要递归遍历这个对象，执行 Object.defineProperty 把每一层对象数据都变成响应式的，这无疑会有很大的性能消耗。\n在 Vue.js 3.0 中，使用 Proxy API 并不能监听到对象内部深层次的属性变化，因此它的处理方式是在 getter 中去递归响应式，这样的好处是真正访问到的内部属性才会变成响应式，简单的可以说是按需实现响应式，减少性能消耗。")])])])]),t._v(" "),v("p")]),t._v(" "),v("hr"),t._v(" "),v("p",{staticStyle:{color:"blue"}},[t._v("2. git stash的用法 【Git】 ")]),t._v(" "),v("details",[v("summary",[v("b",[t._v("参考答案")])]),t._v(" "),v("p",[v("ol",[v("li",[t._v("把未提交的修改（暂存和非暂存）保存起来"),v("br"),t._v(" "),v("strong",[t._v('git stash save "test-cmd-stash" -u[存放未跟踪的文件]')])]),t._v(" "),v("li",[t._v("查看现有stash"),v("br"),t._v(" "),v("strong",[t._v("git stash list")])]),t._v(" "),v("li",[t._v("查看指定stash的修改"),v("br"),t._v(" "),v("strong",[t._v("git stash show [stash@{1}-不指定显示最新的]  [-u 显示未跟踪文件]")])]),t._v(" "),v("li",[t._v("恢复之前的进度继续开发新功能\n"),v("strong",[t._v("git stash pop")]),t._v(" [stash@{1}]")]),t._v(" "),v("li",[t._v("移除stash"),v("br"),t._v(" "),v("strong",[t._v("git stash drop [stash_id(不指定删除最新的)]")])]),t._v(" "),v("li",[t._v("删除所有stash"),v("br"),t._v(" "),v("strong",[t._v("git stash clear")])])])])]),t._v(" "),v("hr"),t._v(" "),v("p",{staticStyle:{color:"blue"}},[t._v("3. item2 (终端) 常用的快捷键记录")]),t._v(" "),v("details",[v("summary",[v("b",[t._v("参考答案")])]),t._v(" "),v("p",[v("table",[v("thead",[v("tr",[v("th",[t._v("描述")]),t._v(" "),v("th",[t._v("命令")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("新建标签")]),t._v(" "),v("td",[t._v("command + t")])]),t._v(" "),v("tr",[v("td",[t._v("切换标签")]),t._v(" "),v("td",[t._v("command + 数字")])]),t._v(" "),v("tr",[v("td",[t._v("切换全屏")]),t._v(" "),v("td",[t._v("command + enter")])]),t._v(" "),v("tr",[v("td",[t._v("垂直分屏")]),t._v(" "),v("td",[t._v("command + d")])]),t._v(" "),v("tr",[v("td",[t._v("删除文本到末尾")]),t._v(" "),v("td",[t._v("ctrl + k")])]),t._v(" "),v("tr",[v("td",[t._v("清除当前行")]),t._v(" "),v("td",[t._v("ctrl + u")])]),t._v(" "),v("tr",[v("td",[t._v("清除当前屏幕")]),t._v(" "),v("td",[t._v("ctrl + l")])]),t._v(" "),v("tr",[v("td",[t._v("到行首")]),t._v(" "),v("td",[t._v("ctrl + a")])]),t._v(" "),v("tr",[v("td",[t._v("到行尾")]),t._v(" "),v("td",[t._v("ctrl + e")])]),t._v(" "),v("tr",[v("td",[t._v("本地拷贝文件到服务器")]),t._v(" "),v("td",[t._v("scp /Users/opload.js "),v("a",{attrs:{href:"mailto:root@x.x.x.x"}},[t._v("root@x.x.x.x")]),t._v(":/data/")])]),t._v(" "),v("tr",[v("td",[t._v("多级目录创建")]),t._v(" "),v("td",[t._v("mkdir -p dir/dir1/dir2")])]),t._v(" "),v("tr",[v("td",[t._v("文件拷贝")]),t._v(" "),v("td",[t._v("cp -r /test/demo.js /data/demo.js")])]),t._v(" "),v("tr",[v("td",[t._v("文件移动")]),t._v(" "),v("td",[t._v("mv /root/jar/demo.jar /data/")])]),t._v(" "),v("tr",[v("td",[t._v("查看当前文件下所有路径")]),t._v(" "),v("td",[t._v("find .")])]),t._v(" "),v("tr",[v("td",[t._v("解压文件")]),t._v(" "),v("td",[t._v("tar -zxvf test.tar.zip -C /data/demo")])]),t._v(" "),v("tr",[v("td",[t._v("连接服务器")]),t._v(" "),v("td",[t._v("ssh -p 22 root@ip_address")])]),t._v(" "),v("tr",[v("td",[t._v("系统信息")]),t._v(" "),v("td",[t._v("uname -a")])]),t._v(" "),v("tr",[v("td",[t._v("本地地址")]),t._v(" "),v("td",[t._v("ifconfig")])]),t._v(" "),v("tr",[v("td",[t._v("查看服务器端口占用")]),t._v(" "),v("td",[t._v("netstat -tunpl")])])])])])]),t._v(" "),v("hr"),t._v(" "),v("p",{staticStyle:{color:"blue"}},[t._v("4. 新建正则实例的两种方式 【Reg】 ")]),t._v(" "),v("details",[v("summary",[v("b",[t._v("参考答案")])]),t._v(" "),v("p",[v("ol",[v("li",[t._v("let regex = /xyz/;")]),t._v(" "),v("li",[t._v("let regex = new RegExp('xyz','i')")])])])]),t._v(" "),v("hr"),t._v(" "),v("p",{staticStyle:{color:"blue"}},[t._v("5. 浏览器对象location.reload()参数作用 【BOM】")]),t._v(" "),v("details",[v("summary",[v("b",[t._v("参考答案")])]),t._v(" "),v("p"),v("p",[t._v("location.reload():传入true，则重新加载本页面且scrollTop为0,传为false，则会回到当前位置。")]),t._v(" "),v("p")]),t._v(" "),v("comment")],1)}),[],!1,null,null,null);v.default=e.exports}}]);