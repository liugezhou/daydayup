(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{331:function(t,e,s){"use strict";s.r(e);var r=s(10),v=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("div",{staticStyle:{color:"#512DA8"},attrs:{align:"right"}},[t._v("2022年11月17日 星期四")]),t._v(" "),e("blockquote",[e("p",[t._v("随大流做点新鲜事还是有好处的，它能让你更快的发现自己真正热爱的是什么。")])]),t._v(" "),e("p",{staticStyle:{color:"blue"}},[t._v("1. ts中的undefined和null类型如何有效使用 【TS】 ")]),t._v(" "),e("details",[e("summary",[e("b",[t._v("参考答案")])]),t._v(" "),e("div",{staticClass:"language-typescript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-typescript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" u"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined 类型          ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null 类型                    ")]),t._v("\n")])])]),e("p",[t._v("默认情况下 null 和 undefined 是所有类型的子类型。 就是说你可以把 null 和 undefined 赋值给 number 类型的变量。")]),t._v(" "),e("div",{staticClass:"language-typescript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-typescript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" age"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" realName"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("\n")])])])]),t._v(" "),e("hr"),t._v(" "),e("p",{staticStyle:{color:"blue"}},[t._v("2. ts中type和interface的区别是什么 【TS】  ")]),t._v(" "),e("details",[e("summary",[e("b",[t._v("参考答案")])]),t._v(" "),e("p",[t._v("由于 ts 中 type 和 interface 的使用有时候能实现相同的功能，所以容易混淆."),e("br"),t._v("\n这里的 type 叫 "),e("code",[t._v("类型别名")]),t._v("，interface 叫 "),e("code",[t._v("接口")])]),t._v(" "),e("p",[e("strong",[t._v("interface")]),t._v("：是 TS 设计出来用于定义对象类型的，可以对对象的属性进行描述。"),e("br"),t._v(" "),e("strong",[t._v("type")]),t._v("： 只是给类型起一个新名字，它并不是一个类型，只是一个别名而已。")]),t._v(" "),e("p",[t._v("比如 "),e("code",[t._v("type son = string | number")])]),t._v(" "),e("p",[t._v("相同点：都可以定义一个对象和函数、都允许继承、且可以互相继承"),e("br"),t._v("\n不同点：type 会给类型起个新名字，可以作用于原始数据类型、联合类型、元组以及其它任何的手写类型，而 interface 可以合并重复声明至合并。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/7063521133340917773?utm_source=blog.liugezhou.online",target:"_blank",rel:"noopener noreferrer"}},[t._v("详细解释"),e("OutboundLink")],1)])]),t._v(" "),e("hr"),t._v(" "),e("p",{staticStyle:{color:"blue"}},[t._v("3. 前端设计通用组件的核心、基础原则 ")]),t._v(" "),e("details",[e("summary",[e("b",[t._v("参考答案")])]),t._v(" "),e("ol",[e("li",[e("strong",[t._v("单一职责原则")]),e("br"),t._v("\n即原则上一个组件只专注与一件事，好处是可以最大可能性地复用组件，即单一职责建立在可复用基础上。")]),t._v(" "),e("li",[e("strong",[t._v("通用原则")]),e("br"),t._v("\n组件的形态(DOM结构)永远是千变万化的,但是其行为(逻辑)是固定的,因此通用组件的秘诀之一就是将 DOM 结构的控制权交给开发者,组件只负责行为和最基本的 DOM 结构")]),t._v(" "),e("li",[e("strong",[t._v("封装")]),e("br"),t._v("\n良好的封装应隐藏内容细节和实现意义，通过props控制行为的输入和输出，同时减少访问全局变量的能力。")]),t._v(" "),e("li",[e("strong",[t._v("富有意义")]),e("br"),t._v("\n代码的描述意义和可读性：命名规范、html语义化、合理的代码注释")]),t._v(" "),e("li",[e("strong",[t._v("可测试")]),e("br"),t._v("\n单测保证代码的正确性")])])]),t._v(" "),e("hr"),t._v(" "),e("p",{staticStyle:{color:"blue"}},[t._v("4. CSS的布局技术都有哪些？【CSS】  ")]),t._v(" "),e("details",[e("summary",[e("b",[t._v("参考答案")])]),t._v(" "),e("ol",[e("li",[t._v("正常布局流\n浏览器默认的HTML布局方式。")]),t._v(" "),e("li",[t._v("display 属性")]),t._v(" "),e("li",[t._v("弹性盒子 display:flex")]),t._v(" "),e("li",[t._v("Grid布局")]),t._v(" "),e("li",[t._v("浮动 float")]),t._v(" "),e("li",[t._v("定位position")]),t._v(" "),e("li",[t._v("表格布局 table")]),t._v(" "),e("li",[t._v("多列布局 "),e("code",[t._v("column-width")])])])]),t._v(" "),e("hr"),t._v(" "),e("p",{staticStyle:{color:"blue"}},[t._v("5. 请求时候遇见过Options吗，什么时候会发送Options请求？（预检请求）")]),t._v(" "),e("details",[e("summary",[e("b",[t._v("参考答案")])]),t._v(" "),e("p",[t._v("使用OPTIONS方法对服务器发起请求时，可以检测服务器支持哪些HTTP方法。"),e("br"),t._v("\n但我们在开发工程中，在Chrome中网络调试时，对于高版本来说，没有看到发起OPTIONS请求，这是由于Chrome版本升级将预检请求归置在了 "),e("code",[t._v("other")]),t._v("分类下。")]),t._v(" "),e("ul",[e("li",[t._v("发生预检请求的前提是发生了"),e("strong",[t._v("CORS跨域")]),t._v("，然后符合以下三种情况中的一种或多种可能会触发OPTIONS请求：")])]),t._v(" "),e("ol",[e("li",[t._v("使用PUT、DELETE、OPTIONS、PATCH、TRACE、CONNECT请求方式；")]),t._v(" "),e("li",[t._v("加了自定义Header(与请求方式无关，即也包含GET)；")]),t._v(" "),e("li",[t._v("Content-Type为application/json等；")])]),t._v(" "),e("p",[t._v("浏览器之所以会发生预检请求是因为发生CORS跨域后，可能会对服务器产生副作用的请求。"),e("br"),t._v("\n因此浏览器会主动发起一个OPTIONS预检请求，从而获知服务器是否允许该跨域请求。")]),t._v(" "),e("p",[t._v("优化点：一旦触发条件跨域请求便会发送2次请求，那可以通过缓存预检请求的结果来实现优化；")]),t._v(" "),e("p",[e("strong",[t._v("Access-Control-Max-Age")]),t._v("，表示预检请求的返回结果可以被缓存的最长时间（秒），如果值为-1表示禁用缓存，因此优化点在于不要将其设置为-1；")])]),t._v(" "),e("comment")],1)}),[],!1,null,null,null);e.default=v.exports}}]);